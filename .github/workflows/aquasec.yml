name: Aqua Security pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
      # comment4
      
env:
   DEPARTMENT: sdr  #e.g sdr, csm
   DOCKER_REPOSITORY: noahschlegel #<dockerhub name> e.g andresguisado
   CONTAINER_NAME: noahs-app #<name + first letter of your last name> e.g andresg-app
   IMAGE_NAME: gh-nodejs-app
   IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER - don't need to do anything

jobs:
  CI-Code:
    runs-on: ubuntu-22.04
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Integrity Pipeline
        uses: aquasecurity/pipeline-enforcer-action@main
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
          
      - name: Aqua code scanning(SCA, Sensitive data, IaC, SAST, pipeline file, initial SBOM)
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --scanners misconfig,vuln,secret --sast --reachability --package-json --skip-files pom.xml .
          # --format template --template "@Report-Templates/aqua.tpl" -o .github/workflows/code_scan_results.html
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          TRIVY_RUN_AS_PLUGIN: 'aqua'

         
  CI-Build:
    needs: CI-Code
    runs-on: ubuntu-22.04
      
    steps:   
   
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Integrity Pipeline
        uses: aquasecurity/pipeline-enforcer-action@main
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
  
      - name: Build application
        run: echo Application has been succesfully built   
          
      - name: Build image container
        run: |
          sudo docker build -t $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
        
      - name: Login to Aqua Registry
        uses: docker/login-action@v1
        with:
          registry: registry.aquasec.com
          username: ${{ secrets.AQUA_REGISTRY_USERNAME }}
          password: ${{ secrets.AQUA_REGISTRY_PASS }}
          
      - name: Scanning container image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:2404.30.6 scan --host ${{ secrets.AQUA_HOST }} --local $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG --token ${{ secrets.AQUA_TOKEN }} --layer-vulnerabilities --no-verify --html > .github/workflows/scan-output.html
      # --register --registry "CI/CD_andres_images" 
      #github/workflows/scan-output.html
      # --register --registry "CI/CD_andres_images"
      # -e BUILD_JOB_NAME=$CI_JOB_NAME -e BUILD_URL=$CI_JOB_URL -e BUILD_NUMBER=$CI_JOB_ID
      
      - name: Upload HTML file to artifact
        uses: actions/upload-artifact@v4
        with:
         name: Aqua Image Scan Report
         path: .github/workflows/scan-output.html
         
      #- name: Log in to Docker Hub
        #uses: docker/login-action@v2
        #with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          #password: ${{ secrets.DOCKERHUB_PAT }}

      #- name: Build and push Docker image
        #uses: docker/build-push-action@v6
        #with:
          #context: .
          #file: ./Dockerfile
          #push: true
          #tags: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}
          
      - name: Docker Login & Push
        run: |
          echo "${{ secrets.DOCKERHUB_PAT2 }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME2 }} --password-stdin
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG 
          docker tag $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG $DOCKER_REPOSITORY/$IMAGE_NAME:latest
          docker push $DOCKER_REPOSITORY/$IMAGE_NAME:latest 
     
      - name: SBOM Generation
        run: |
          export BILLY_SERVER=https://billy.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum ; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ github.token }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --artifact-path "$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG"

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            ## --artifact-path "${{env.MY_APP_ROOT}}"
            
  CD-Deploy_to_dev:
    needs: CI-Build
    runs-on: ubuntu-22.04
    
    steps: 
    
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Integrity Pipeline
        uses: aquasecurity/pipeline-enforcer-action@main
        with:
          aqua-key: ${{ secrets.AQUA_KEY }}
          aqua-secret: ${{ secrets.AQUA_SECRET }}
         
      - name: Setting K8s context
        uses: azure/k8s-set-context@v3
        with:
           method: kubeconfig
           kubeconfig: ${{ secrets.KUBECONFIG }}
           context: emea-aguisado-test
           
      - name: Deploying to Dev
        run: |
          export IMAGE_CONTAINER="docker.io/$DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG"
          export CONTAINER_NAME="$CONTAINER_NAME"
          sed -e "s#{{ IMAGE_CONTAINER }}#$IMAGE_CONTAINER#g" "./manifests/dev/deployment.yaml" && sed -e "s#{{ CONTAINER_NAME }}#$CONTAINER_NAME#g" "./manifests/dev/deployment.yaml" | 
          kubectl apply -f -
          kubectl apply -f ./manifests/dev/service.yaml
            
